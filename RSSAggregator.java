import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *  @ Thomas Foley
 *
 */
public final class RSSAggregator {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSAggregator() {
    }

    /**
     * Processes one XML RSS (version 2.0) feed from a given URL converting it
     * into the corresponding HTML output file.
     *
     * @param url
     *            the URL of the RSS feed
     * @param file
     *            the name of the HTML output file
     * @param out
     *            the output stream to report progress or errors
     * @updates out.content
     * @requires out.is_open
     * @ensures <pre>
     * [reads RSS feed from url, saves HTML document with table of news items
     *   to file, appends to out.content any needed messages]
     * </pre>
     */
    private static void processFeed(String url, String file, SimpleWriter out) {

        XMLTree xml = new XMLTree1(url);

        SimpleWriter htmlOut = new SimpleWriter1L(file);

        if (xml.label().contains("rss")
                && xml.attributeValue("version").contains("2.0")) {

            XMLTree channel = xml.child(getChildElement(xml, "channel"));
            outputHeader(channel, htmlOut);

            for (int i = 0; i < channel.numberOfChildren(); i++) {
                if (channel.child(i).label().contains("item")) {
                    processItem(channel.child(i), htmlOut);
                }
            }

            outputFooter(htmlOut);

        } else {
            out.println("Feed not valid RSS!");
        }
    }

    private static void outputMainHeader(SimpleWriter out, String title) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("<html>");
        out.println("<head>");
        out.println("<title>" + title + "</title>");
        out.println("</head>");
        out.println("<body>");
        out.println("<h2>" + title + "</h2>");
        out.println("<ul>");
    }

    private static void outputMainFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("</ul>");
        out.println("</body>");
        out.println("</html>");
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        int titleElement = getChildElement(channel, "title");
        int descElement = getChildElement(channel, "description");
        int linkElement = getChildElement(channel, "link");
        String title = "No title available";
        String desc = "No description available";
        String link = "No link available";
        if (titleElement != -1) {
            if (channel.child(titleElement).numberOfChildren() > 0) {
                title = channel.child(titleElement).child(0).label();
            }
        }
        if (descElement != -1) {
            if (channel.child(descElement).numberOfChildren() > 0) {
                desc = channel.child(descElement).child(0).label();
            }
        }
        if (linkElement != -1) {
            if (channel.child(linkElement).numberOfChildren() > 0) {
                link = channel.child(linkElement).child(0).label();
            }
        }
        out.print("<html><head><title>" + title + "</title></head>");
        out.print("<body><h1>" + link + "</h1>");
        out.print("<p>" + desc + "</p>");
        out.print("<table border=" + 1 + ">");
        out.print("<tr><th>Date</th><th>Source</th><th>News</th></tr>");
    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        out.print("</table></body></html>");
    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";
        int count = 0;
        int desiredTag = -1;
        while (count < xml.numberOfChildren() && desiredTag == -1) {
            if (xml.child(count).isTag()) {
                if (xml.child(count).label().equals(tag)) {
                    desiredTag = count;
                }
            }
            count++;
        }
        return desiredTag;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";
        int titleElement = getChildElement(item, "title");
        String title = "";
        int descElement = getChildElement(item, "description");
        String desc = "";
        int sourceElement = getChildElement(item, "source");
        String source = "";
        int linkElement = getChildElement(item, "link");
        String link = "";
        int pubDateElement = getChildElement(item, "pubDate");
        String pubDate = "";

        if (titleElement != -1) {
            if (item.child(titleElement).numberOfChildren() > 0) {
                title = item.child(titleElement).child(0).label();
            }
        }
        if (descElement != -1) {
            if (item.child(descElement).numberOfChildren() > 0) {
                desc = item.child(descElement).child(0).label();
            }
        }
        if (sourceElement != -1) {
            if (item.child(sourceElement).numberOfChildren() > 0) {
                source = item.child(sourceElement).child(0).label();
            }
        }
        if (linkElement != -1) {
            if (item.child(linkElement).numberOfChildren() > 0) {
                link = item.child(linkElement).child(0).label();
            }
        }
        if (pubDateElement != -1) {
            if (item.child(pubDateElement).numberOfChildren() > 0) {
                pubDate = item.child(pubDateElement).child(0).label();
            }
        }

        out.print("<tr><td>" + pubDate + "</td>");
        if (sourceElement != -1) {
            out.print("<td>" + source + "</td>");
        } else {
            out.print("<td>No source available</td>");
        }
        if (titleElement != -1 && linkElement != -1) {
            out.print("<td><a href= " + link + ">" + title + "</td>");
        } else if (descElement != -1 && linkElement != -1) {
            out.print("<td><a href=" + link + ">" + desc + "</td>");
        } else {
            out.print("<td>No title available</td>");
        }
        out.print("</tr>");
    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        out.println("Please enter an URL of an RSS 2.0 feed");
        String rssFeed = in.nextLine();
        out.println("Please enter the Name of Header with .html at the end");
        String htmlExtension = in.nextLine();
        SimpleWriter html = new SimpleWriter1L(htmlExtension);
        XMLTree rootNode = new XMLTree1(rssFeed);
        XMLTree channel = rootNode.child(0);
        outputHeader(channel, html);

        for (int i = 0; i < channel.numberOfChildren(); i++) {
            if (channel.child(i).isTag()) {
                if (channel.child(i).label().equals("item")) {
                    processItem(channel.child(i), html);
                }
            }
        }

        outputFooter(html);
        in.close();
        out.close();
    }

}
